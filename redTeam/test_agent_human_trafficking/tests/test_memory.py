import pytest
import sqlite3
from datetime import datetime
from agents.agent_local import SQLiteChatMemory
import os

# Configura√ß√£o do banco de dados tempor√°rio para os testes
@pytest.fixture
def chat_memory():
    db_teste = "test_memory.db"
    if os.path.exists(db_teste):
        os.remove(db_teste)  # Remove banco de testes anterior
    session_id_teste = "TESTE_PYTEST"
    memory = SQLiteChatMemory(db_path=db_teste, session_id=session_id_teste)
    return memory


# üß™ Teste 1: Verifica se o banco de dados cria a tabela corretamente
def test_criacao_tabela(chat_memory):
    chat_memory.cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='chat_history';")
    tabela_existe = chat_memory.cursor.fetchone()
    assert tabela_existe is not None, "‚ùå A tabela 'chat_history' n√£o foi criada corretamente."

# üß™ Teste 2: Verifica inser√ß√£o de mensagens na mem√≥ria
def test_inserir_mensagens(chat_memory):
    chat_memory.add_message("Agente", "Mensagem de teste do agente.", "ModeloAgente", False)
    chat_memory.add_message("LLM Alvo", "Resposta de teste do LLM.", "ModeloLLM", True)

    chat_memory.cursor.execute("SELECT sender, message, is_problematic FROM chat_history WHERE session_id=?", ("TESTE_PYTEST",))
    mensagens = chat_memory.cursor.fetchall()

    assert len(mensagens) == 2, "‚ùå As mensagens n√£o foram armazenadas corretamente."
    assert mensagens[0][0] == "Agente", "‚ùå O remetente da primeira mensagem est√° incorreto."
    assert mensagens[0][1] == "Mensagem de teste do agente.", "‚ùå O conte√∫do da primeira mensagem est√° incorreto."
    assert mensagens[1][0] == "LLM Alvo", "‚ùå O remetente da segunda mensagem est√° incorreto."
    assert mensagens[1][1] == "Resposta de teste do LLM.", "‚ùå O conte√∫do da segunda mensagem est√° incorreto."
    assert mensagens[1][2] == 1, "‚ùå A segunda mensagem deveria estar marcada como problem√°tica."

# üß™ Teste 3: Verifica se os dados persistem na mem√≥ria ap√≥s reiniciar conex√£o
def test_persistencia(chat_memory):
    chat_memory.add_message("Agente", "Persist√™ncia de teste.", "ModeloAgente", False)

    # Fecha e reabre conex√£o com o mesmo arquivo de banco de dados
    chat_memory.conn.close()
    nova_conexao = sqlite3.connect("test_memory.db")  # Agora mant√©m os dados
    novo_cursor = nova_conexao.cursor()

    # Busca mensagens na tabela
    novo_cursor.execute("SELECT sender, message FROM chat_history WHERE session_id=?", ("TESTE_PYTEST",))
    mensagens = novo_cursor.fetchall()

    assert mensagens, "‚ùå Os dados n√£o foram recuperados corretamente ap√≥s reiniciar conex√£o."
    
    # Fecha conex√£o para evitar vazamento
    nova_conexao.close()

# üß™ Teste 4: Verifica se mensagens problem√°ticas s√£o marcadas corretamente
def test_marcacao_mensagem_problematicas(chat_memory):
    chat_memory.add_message("LLM Alvo", "Mensagem problem√°tica.", "ModeloLLM", True)
    chat_memory.cursor.execute("SELECT is_problematic FROM chat_history WHERE message=?", ("Mensagem problem√°tica.",))
    resultado = chat_memory.cursor.fetchone()

    assert resultado[0] == 1, "‚ùå A mensagem n√£o foi marcada como problem√°tica corretamente."

